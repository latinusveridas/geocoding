//
//EXPRESS
var express = require('express');
var app = express();

//BODYPARSER
var bodyParser = require("body-parser");
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

//DATES
var isoWeek = require('iso-week');
var dateModule = require('date-and-time');

// DB
var mysql = require('mysql');

// DEFINE POOLING
var pool_events = mysql.createPool({
    connectionLimit: 10,
    host: "83.217.132.102",
    port: '3306',
    user: "root",
    password: "Miroslava326356$$$$$",
    database: "events"
});

module.exports.pool_events = pool_events;

//Structure of the response
var resMain = {
    "error": 0,
    "error_description": "",
    "success" : "",
    "type_data" : "",
    "data" : {}
}

app.get('/collectevents', function (req,res) {

	var Code = "fr" // <--- Debug
	CollectEvents(Code).then(toBeSend => {
	res.status(200).json(toBeSend)
	})

});

function CollectEvents(countryCode) {

	return new Promise (function(resolve,reject) {

		PrepareAndQuery(countryCode).then(rawResult => {
		resolve(rawResult)
		})
	})

}

function PrepareAndQuery(countryCode) {

	return new Promise(function(resolve,reject) {
	
		var strQuery = "SELECT * from 2019_" + countryCode
		promiseBasicQuery(strQuery).then(rawRows => {
		resolve(rawRows)
		})
	
	})
}

// ================ SERVER LAUNCH ======================
// Helper on port 3002
app.listen(3002,function(req,res){
    console.log('WORKS DATES ON GOING');
});

// =================== DATABASES FUNCTIONS ==============================

function promiseBasicQuery(query) {

	return new Promise(function(resolve,reject) {
		
		pool_events.getConnection(function (err,con) {
			if (err) {
				console.log(err)
			} else {
				console.log("Check connection : OK")
			con.query(query, function(err,result,fields) {	
					if (err) {
						return reject(err)
						console.log(err)
					} else {
						return resolve(result)
					}

					})
			
			}
			con.release();
		})

	})
}

function checkEventsInTheTable(elem) {

	return new Promise(function(resolve,reject) {
		
	    // PRELIMINARY WORKS
	    var collected_events = [] 
	    var organizer_id = "'debug_organizer_id_1'"
	    
	    var selec_query = "SELECT * FROM " + elem + " WHERE organizer_id = " + organizer_id

	    promiseBasicQuery(selec_query).then(results => {
	    resolve(results)
	    });

	})
				    
}

app.post('/createevent', function (req,res) {

	var country_code_table = "fr" // <--- DEBUG

        var resMain = {
        "error": 0,
        "error_description": "",
        "success" : "",
        "type_data" : "",
        "data" : {}
    }
    
    // Define the variables    
    var sport = req.body.sport
    var organizer_id = req.body.organizer_id
    var price = req.body.price
    var part_max = req.body.part_max
    var date = req.body.date
    var addressStr = req.body.address_string
    var location_city = "" // Will be feeded during geocoding and sent to events table

    console.log("Collected from the client:",sport,organizer_id,price,part_max,date,addressStr,location_city)
    
    // Generate the event_id
    var dt = datetime.create();
    var dt = dt.format('Y_m')
    var eventID = dt + '_E_' + rdmString.generate(40) ;
    //console.log("GENERATED EVENT_ID " + eventID) 
    
    // Geocoding closure to obtain geocoding data which will be saved in the db
    geocodeFunction(addressStr, function (callback) {

        //ON DEFINIE targetTable & locationData
        var resTable = callback[0]
        var locationData = [
            // on geocodeFunction, the eventID is put as nil, so now its loaded is the values loaded is the db
            "'" + eventID + "'",
            "'" + callback[1][1] + "'",
            "'" + callback[1][2] + "'",
            "'" + callback[1][3] + "'",
            "'" + callback[1][4] + "'",
            "'" + callback[1][5] + "'",
            "'" + callback[1][6] + "'",
        ]

        //On sauve la data location dans la table events_location
        //var resTable = "events_location"
        Pool.insertinto(resTable, locationData, function (callback) {

            if (callback.affectedRows = 1) {
            isSuccessTableLocation = true
            } else {
            isSuccessTableLocation = false
            }
            
        console.log("Success posting of location data : ", isSuccessTableLocation)
            
                // Populate location_city for events table
                var location_city = locationData[4]
                console.log("Location city is ",location_city)

                // updating data in events table
                var targetTable = 'sampledb.events'
                var eventData = [
                "'" + eventID + "'",
                "'" + date + "'",
                location_city,
                "'" + sport + "'",
                "'" + 0 + "'",
                "'" + part_max + "'",
                "'" + price + "'",
                "'" + organizer_id + "'",
                ]

                var events_col = [
                    'event_id',
                    'date',
                    'location',
                    'sport',
                    'nb_part_sub',
                    'nb_part_max',
                    'price_per_part',
                    'organizer_id'
                ]

                //On sauve la data events dans la table events
                Pool.insertSpecific(targetTable, events_col, eventData, function (callback2) {
            
                    if (callback2.affectedRows = 1) {
                    isSuccessTableEvents = true
                    } else {
                    isSuccessTableEvents = false
                    }

                    console.log("Success posting of events data : ", isSuccessTableEvents)
                
                    // Verification des success et renvoie de la reponse
                    if (isSuccessTableLocation == true && isSuccessTableEvents == true) {
                        resMain.success = 1
                    res.status(200).json(resMain)
                    } else {
                        resMain.error = 1
                        resMain.error_description = "posting failed"
                    res.status(500).json(resMain)
                    }



                }); // Fin de pool.insertinto
                                


        }); // fin de pool.insertinto table_location
    
        
    }); // fin de geocodeFunction
        
}); ////// fin de createevent

